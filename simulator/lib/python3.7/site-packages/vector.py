#!/usr/bin/env python3
#
#
# Copyright (c) 2018, Hiroyuki Ohsaki.
# All rights reserved.
#
# $Id: vector.py,v 1.5 2018/10/19 07:41:07 ohsaki Exp ohsaki $
#

import math

class Vector:
    def __init__(self, x=0, y=0):
        self.x = float(x)
        self.y = float(y)

    def __iter__(self):
        return iter([self.x, self.y])

    def __getitem__(self, pos):
        if pos == 0:
            return self.x
        elif pos == 1:
            return self.y
        else:
            raise IndexError

    # def __len__(self):
    #     return 2

    def __repr__(self):
        name = type(self).__name__
        return f'{name}({self.x:.3f}, {self.y:.3f})'

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __abs__(self):
        return math.hypot(self.x, self.y)

    def __bool__(self):
        return self.x == 0 and self.y == 0

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)

    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y)

    def __mul__(self, other):
        if isinstance(other, Vector):
            return self.x * other.x + self.y * other.y
        else:
            return Vector(self.x * other, self.y * other)

    def __rmul__(self, other):
        return self.__mul__(other)

    def __truediv__(self, other):
        return Vector(self.x / other, self.y / other)

def main():
    from test_more import eq, is_deeply
    import tbdump
    v1 = Vector(1.2, 3.4)
    v2 = Vector(5.6, 7.8)
    eq(v1[0], 1.2)
    eq(v1[1], 3.4)
    vsum = v1 + v2
    eq(vsum[0], 1.2 + 5.6)
    eq(vsum[1], 3.4 + 7.8)
    eq(vsum, Vector(1.2 + 5.6, 3.4 + 7.8))
    vdiff = v1 - v2
    eq(vdiff, Vector(1.2 - 5.6, 3.4 - 7.8))
    eq(2 * v1, Vector(2 * 1.2, 2 * 3.4))
    eq(v1 * 3.0, Vector(1.2 * 3.0, 3.4 * 3.0))
    eq(v1 / 2, Vector(1.2 / 2, 3.4 / 2))
    eq(abs(v1), math.hypot(1.2, 3.4))

if __name__ == "__main__":
    main()
